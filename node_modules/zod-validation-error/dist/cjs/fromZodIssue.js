"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromZodIssue = exports.getMessageFromZodIssue = void 0;
const zod = __importStar(require("zod"));
const config_1 = require("./config");
const prefixMessage_1 = require("./prefixMessage");
const joinPath_1 = require("./utils/joinPath");
const NonEmptyArray_1 = require("./utils/NonEmptyArray");
const ValidationError_1 = require("./ValidationError");
function getMessageFromZodIssue(props) {
    const { issue, issueSeparator, unionSeparator, includePath } = props;
    if (issue.code === 'invalid_union') {
        return issue.unionErrors
            .reduce((acc, zodError) => {
            const newIssues = zodError.issues
                .map((issue) => getMessageFromZodIssue({
                issue,
                issueSeparator,
                unionSeparator,
                includePath,
            }))
                .join(issueSeparator);
            if (!acc.includes(newIssues)) {
                acc.push(newIssues);
            }
            return acc;
        }, [])
            .join(unionSeparator);
    }
    if (includePath && (0, NonEmptyArray_1.isNonEmptyArray)(issue.path)) {
        if (issue.path.length === 1) {
            const identifier = issue.path[0];
            if (typeof identifier === 'number') {
                return `${issue.message} at index ${identifier}`;
            }
        }
        return `${issue.message} at "${(0, joinPath_1.joinPath)(issue.path)}"`;
    }
    return issue.message;
}
exports.getMessageFromZodIssue = getMessageFromZodIssue;
function fromZodIssue(issue, options = {}) {
    const { issueSeparator = config_1.ISSUE_SEPARATOR, unionSeparator = config_1.UNION_SEPARATOR, prefixSeparator = config_1.PREFIX_SEPARATOR, prefix = config_1.PREFIX, includePath = true, } = options;
    const reason = getMessageFromZodIssue({
        issue,
        issueSeparator,
        unionSeparator,
        includePath,
    });
    const message = (0, prefixMessage_1.prefixMessage)(reason, prefix, prefixSeparator);
    return new ValidationError_1.ValidationError(message, { cause: new zod.ZodError([issue]) });
}
exports.fromZodIssue = fromZodIssue;

{"version":3,"sources":["../../src/entrypoint.tsx"],"sourcesContent":["import Button from '@mui/material/Button';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ToolpadComponents } from '@mui/toolpad-core';\nimport createCache from '@emotion/cache';\nimport { CacheProvider } from '@emotion/react';\nimport { Box } from '@mui/material';\nimport { RuntimeState } from './runtime/types';\nimport {\n  AppHost,\n  AppHostContext,\n  ToolpadApp as RuntimeToolpadApp,\n  ToolpadAppProps,\n  componentsStore,\n  pageComponentsStore,\n} from './runtime';\n\nconst IS_PREVIEW = process.env.NODE_ENV !== 'production';\nconst IS_CUSTOM_SERVER = process.env.TOOLPAD_CUSTOM_SERVER === 'true';\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n});\n\n// See https://github.com/emotion-js/emotion/issues/1105#issuecomment-1058225197\ncache.compat = true;\n\n/**\n * This allows us to hot update the components when a file is added/removed\n */\nexport function setComponents(\n  newComponents: ToolpadComponents,\n  pageComponents: Record<string, React.ComponentType>,\n) {\n  componentsStore.setState(newComponents);\n  pageComponentsStore.setState(pageComponents);\n}\n\ninterface RootProps {\n  initialState: RuntimeState;\n  base: string;\n  ToolpadApp: React.ComponentType<ToolpadAppProps>;\n}\n\nconst IS_RENDERED_IN_CANVAS =\n  typeof window === 'undefined'\n    ? false\n    : !!(window.frameElement as HTMLIFrameElement)?.dataset?.toolpadCanvas;\n\nconst appHost: AppHost = {\n  isPreview: IS_PREVIEW,\n  isCustomServer: IS_CUSTOM_SERVER,\n  isCanvas: IS_RENDERED_IN_CANVAS,\n};\n\nfunction Root({ ToolpadApp, initialState, base }: RootProps) {\n  return (\n    <React.StrictMode>\n      <CacheProvider value={cache}>\n        {/* For some reason this helps with https://github.com/vitejs/vite/issues/12423 */}\n        <Button sx={{ display: 'none' }} />\n        <AppHostContext.Provider value={appHost}>\n          <ToolpadApp basename={base} state={initialState} />\n        </AppHostContext.Provider>\n        <Box data-testid=\"page-ready-marker\" sx={{ display: 'none' }} />\n      </CacheProvider>\n    </React.StrictMode>\n  );\n}\n\nexport interface InitParams {\n  initialState: RuntimeState;\n  base: string;\n  ToolpadApp?: React.ComponentType<ToolpadAppProps>;\n}\n\nexport function init({ ToolpadApp = RuntimeToolpadApp, initialState, base }: InitParams) {\n  ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <Root base={base} ToolpadApp={ToolpadApp} initialState={initialState} />,\n  );\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAO,YAAY;AACnB,YAAY,WAAW;AACvB,YAAY,cAAc;AAE1B,OAAO,iBAAiB;AACxB,SAAS,qBAAqB;AAC9B,SAAS,WAAW;AAWpB,IAAM,aAAa,QAAQ,IAAI,aAAa;AAC5C,IAAM,mBAAmB,QAAQ,IAAI,0BAA0B;AAE/D,IAAM,QAAQ,YAAY;AAAA,EACxB,KAAK;AAAA,EACL,SAAS;AACX,CAAC;AAGD,MAAM,SAAS;AAKR,SAAS,cACd,eACA,gBACA;AACA,kBAAgB,SAAS,aAAa;AACtC,sBAAoB,SAAS,cAAc;AAC7C;AAQA,IAAM,wBACJ,OAAO,WAAW,cACd,QACA,CAAC,CAAE,OAAO,cAAoC,SAAS;AAE7D,IAAM,UAAmB;AAAA,EACvB,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,UAAU;AACZ;AAEA,SAAS,KAAK,EAAE,YAAAA,aAAY,cAAc,KAAK,GAAc;AAC3D,SACE,oCAAO,kBAAN,MACC,oCAAC,iBAAc,OAAO,SAEpB,oCAAC,UAAO,IAAI,EAAE,SAAS,OAAO,GAAG,GACjC,oCAAC,eAAe,UAAf,EAAwB,OAAO,WAC9B,oCAACA,aAAA,EAAW,UAAU,MAAM,OAAO,cAAc,CACnD,GACA,oCAAC,OAAI,eAAY,qBAAoB,IAAI,EAAE,SAAS,OAAO,GAAG,CAChE,CACF;AAEJ;AAQO,SAAS,KAAK,EAAE,YAAAA,cAAa,YAAmB,cAAc,KAAK,GAAe;AACvF,EAAS,oBAAW,SAAS,eAAe,MAAM,CAAgB,EAAE;AAAA,IAClE,oCAAC,QAAK,MAAY,YAAYA,aAAY,cAA4B;AAAA,EACxE;AACF;","names":["ToolpadApp"]}
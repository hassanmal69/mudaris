export { R as RenderedPage, a as ToolpadApp, T as ToolpadAppProps } from './ToolpadApp-Bbsx4TB9.mjs';
import * as React from 'react';
import * as _mui_toolpad_core from '@mui/toolpad-core';
import { NodeHashes, ComponentConfig } from '@mui/toolpad-core';
import * as appDom from '@mui/toolpad-core/appDom';
export { R as RuntimeState } from './types-e_iIjmol.mjs';

declare const componentsStore: {
    getState: () => Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>;
    setState: (newState: Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>> | ((oldValue: Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>) => Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>)) => void;
    useValue: () => Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>;
    useState: () => (Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>> | ((newState: Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>> | ((oldValue: Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>) => Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>)) => void))[];
    subscribe: (cb: (state: Partial<Record<string, _mui_toolpad_core.ToolpadComponent<any>>>) => void) => () => void;
};
declare const pageComponentsStore: {
    getState: () => Partial<Record<string, React.ComponentType<{}>>>;
    setState: (newState: Partial<Record<string, React.ComponentType<{}>>> | ((oldValue: Partial<Record<string, React.ComponentType<{}>>>) => Partial<Record<string, React.ComponentType<{}>>>)) => void;
    useValue: () => Partial<Record<string, React.ComponentType<{}>>>;
    useState: () => (Partial<Record<string, React.ComponentType<{}>>> | ((newState: Partial<Record<string, React.ComponentType<{}>>> | ((oldValue: Partial<Record<string, React.ComponentType<{}>>>) => Partial<Record<string, React.ComponentType<{}>>>)) => void))[];
    subscribe: (cb: (state: Partial<Record<string, React.ComponentType<{}>>>) => void) => () => void;
};

interface AppHost {
    isPreview: boolean;
    isCustomServer: boolean;
    isCanvas: boolean;
}
declare const AppHostContext: React.Context<AppHost | null>;

/**
 * Context created by the app canvas to override behavior for the app editor
 */
interface CanvasHooks {
    savedNodes?: NodeHashes;
    registerNode?: (node: appDom.AppDomNode, props: Record<string, unknown>, componentConfig: ComponentConfig, elm: Element | undefined) => () => void;
    overlayRef?: (elm: HTMLDivElement) => void;
}
declare const CanvasHooksContext: React.Context<CanvasHooks>;

declare function createRemoteFunction(functionFile: string, functionName: string): (...params: any[]) => Promise<unknown>;

export { type AppHost, AppHostContext, type CanvasHooks, CanvasHooksContext, componentsStore, createRemoteFunction, pageComponentsStore };
